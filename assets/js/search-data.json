{
  
    
        "post0": {
            "title": "문제1. Norm",
            "content": "5&#51452;&#52264; &#44284;&#51228; &#44277;&#51648;&#49324;&#54637; . 아래의 과제를 보고 답안을 작성하시면 됩니다. | 과제에 대한 점수는 100점 만점으로 진행이 됩니다. (한 문제당 20점) | 과제에 대한 평가는 모든 수강생들의 평가가 완료되면 확인할 수 있습니다. 참고부탁드립니다. | 과제기한은 일요일 저녁 10시 까지 입니다. 10시 이후에는 이 불가하오니 이 점 참고부탁드립니다. | &quot;&#51228;&#47785;!!&quot; . &quot;요약!!&quot; . toc:true- branch: master- badges: true | comments: true | author: stella | categories: [jupyter, deepbook] | . from sklearn import datasets from sklearn.linear_model import Lasso X, y = datasets.load_diabetes(return_X_y=True) alpha = 0.1 lasso = Lasso(alpha) lasso.fit(X, y) print(f&#39;alpha={alpha} : {lasso.coef_} n&#39;) alpha = 1.0 lasso = Lasso(alpha) lasso.fit(X, y) lasso.coef_ print(f&#39;alpha={alpha} : {lasso.coef_} n&#39;) alpha = 10.0 lasso = Lasso(alpha) lasso.fit(X, y) lasso.coef_ print(f&#39;alpha={alpha} : {lasso.coef_} n&#39;) . alpha=0.1 : [ -0. -155.36288234 517.18201661 275.08235083 -52.54026923 -0. -210.15975349 0. 483.91440913 33.67282148] alpha=1.0 : [ 0. -0. 367.70185207 6.30190419 0. 0. -0. 0. 307.6057 0. ] alpha=10.0 : [ 0. 0. 0. 0. 0. 0. -0. 0. 0. 0.] . &#47928;&#51228;2. Norm . 난이도 : 중 | 관련 개념 : L2 norm을 이용하여 Regularization | 코드를 이용하여 구해주세요. | . Linear regression의 경우, 계수는 $(X^TX)^{-1}X^TY$이다. 여기에 L2 norm을 Regularization으로 사용하는 모델이 Ridge Regression이다. 아래의 코드를 참고하여 Ridge Regression의 계수를 구하라. . 책, 구글링을 하셔서 ridge regression 계수의 closed form으로 구하시면 됩니다. | closed form에서 $ lambda$는 5로 해주시면 됩니다. | . from sklearn import datasets import numpy as np X, y = datasets.load_diabetes(return_X_y=True) print(f&#39;X의 shape = {X.shape}&#39;) linear_reg_coef = np.linalg.inv(np.transpose(X) @ X) @ np.transpose(X) @ y print(f&#39;Linear Regression의 계수 = {linear_reg_coef}&#39;) print() # 여기에 작성하시면 됩니다. from sklearn.linear_model import Ridge reg = Ridge(alpha = 5) #lamda == alpha ==5 reg.fit(X,y) print(ridge.coef_) . X의 shape = (442, 10) Linear Regression의 계수 = [ -10.01219782 -239.81908937 519.83978679 324.39042769 -792.18416163 476.74583782 101.04457032 177.06417623 751.27932109 67.62538639] [ 29.46574564 -83.15488546 306.35162706 201.62943384 5.90936896 -29.51592665 -152.04046539 117.31171538 262.94499533 111.878718 ] . &#47928;&#51228;3. &#51312;&#44592;&#51333;&#47308; . 난이도 : 하 | 관련 개념 : 조기종료 알고리즘을 만든다. | 코드를 통해 풀어주세요. | . 아래 주석이 있는 부분에 조기종료(early stopping)을 실행하는 코드를 작성하시오. . 조기종료를 하는 방법은 다양합니다. | 이 문제에서는 val_error가 2170000.0 보다 작으면 조기종료가 되도록 코드를 작성해주세요. | . from sklearn import datasets import numpy as np X, y = datasets.load_diabetes(return_X_y=True) train_x = X[:300,0] train_y = y[:300] val_x = X[300:,0] val_y = y[300:] a = 10 learning_rate = 0.05 n_iter = 500 for i in range(n_iter): a = a - learning_rate * np.sum( - train_x * (train_y - a * train_x)) train_error = 0.5 * np.sum((train_y - a * train_x)**2) val_error = 0.5 * np.sum((val_y - a * val_x)**2) # 여기에 early stopping 과정 작성 if val_error &lt; 2170000.0 : break if (i + 1) % 10 == 0: print(f&#39;Iteration {i + 1}&#39;) print(f&#39;train error = {train_error:.3f}&#39;) print(f&#39;a = {a:.3f} n&#39;) . Iteration 10 train error = 4231374.283 a = 56.426 Iteration 20 train error = 4229299.489 a = 88.751 . &#47928;&#51228;4. Noise . 난이도 : 하 | 관련 개념 : nosie를 추가하여 모델링해보기 | . 아래의 Linear Regression 모델링 코드를 이용하여 input X에 noise를 추가하여 test dataset의 MSE를 구하여라. . noise는 np.random.normal을 이용하여 X_train.shape만큼 만들어서 기존 X에 더한다. 이 때 loc=0.0, scale=0.05의 분포에서 noise를 만든다. | . from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error from sklearn.linear_model import LinearRegression import numpy as np X, y = datasets.load_diabetes(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42) # noise를 추가하지 않고 모델링한 예시 model = LinearRegression() model.fit(X_train, y_train) pred = model.predict(X_test) test_mse = mean_squared_error(pred, y_test) # 여기에 코드 작성 model= LinearRegression() model.fit(X_train, y_train) noise = np.random.normal(loc=0.0, scale=0.05, size=X.shape) X = X + noise pred = model.predict(X_test) test_mse = mean_squared_error(pred, y_test) . test_mse . 2743.8800467688447 . &#47928;&#51228;5. &#50521;&#49345;&#48660; (Ensemble) . 난이도 : 하 | 관련 개념 : Bagging의 개념이해 | 코드를 통해 풀어주세요. | . 심층이는 수업시간에 배운 앙상블기법들 중에 Bagging의 기법을 사용해보고자 한다. 회귀문제에서 다양한 모델을 만든 후에 예측값들을 평균내어서 최종결과가 더 좋아지는지 비교하려고 한다. 단일 모델과 앙상블한 모델의 test mse 를 구하고 비교하여라. . 단일 모델 : Lasso | 앙상블 모델 : LinearRegression + Ridge + Lasso | 모델링에서 모델들의 hypterparameter는 default값을 이용하시면 됩니다. | . from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error from sklearn.linear_model import LinearRegression, Ridge, Lasso X, y = datasets.load_diabetes(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) linear_model = LinearRegression() ridge_model = Ridge() lasso_model = Lasso() # 모델 fit linear_model.fit(X_train, y_train) linear_pred = linear_model.predict(X_test) ridge_model.fit(X_train, y_train) ridge_pred = ridge_model.predict(X_test) lasso_model.fit(X_train, y_train) lasso_pred = lasso_model.predict(X_test) # 이후 과정을 코드로 작성하시면 됩니다 .",
            "url": "https://stella-oh.github.io/colabblog/colabblog/2021/07/29/_07_30_%EC%98%A4%EC%9C%A4%EC%A0%95__5%EC%A3%BC%EC%B0%A8_%EA%B3%BC%EC%A0%9C_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "relUrl": "/2021/07/29/_07_30_%EC%98%A4%EC%9C%A4%EC%A0%95__5%EC%A3%BC%EC%B0%A8_%EA%B3%BC%EC%A0%9C_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "date": " • Jul 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stella-oh.github.io/colabblog/colabblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stella-oh.github.io/colabblog/colabblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stella-oh.github.io/colabblog/colabblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stella-oh.github.io/colabblog/colabblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}